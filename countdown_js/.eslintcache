[{"/Users/ming/Desktop/countdown_js/src/index.js":"1","/Users/ming/Desktop/countdown_js/src/reportWebVitals.js":"2","/Users/ming/Desktop/countdown_js/src/App.js":"3","/Users/ming/Desktop/countdown_js/src/Counter.js":"4","/Users/ming/Desktop/countdown_js/src/styles.js":"5"},{"size":500,"mtime":1608488815655,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":1608488815656,"results":"8","hashOfConfig":"7"},{"size":189,"mtime":1608907584178,"results":"9","hashOfConfig":"7"},{"size":2922,"mtime":1608495869558,"results":"10","hashOfConfig":"7"},{"size":759,"mtime":1608495696782,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1mm6zcd",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"/Users/ming/Desktop/countdown_js/src/index.js",[],["24","25"],"/Users/ming/Desktop/countdown_js/src/reportWebVitals.js",[],"/Users/ming/Desktop/countdown_js/src/App.js",[],"/Users/ming/Desktop/countdown_js/src/Counter.js",["26","27","28","29","30","31","32","33","34"],"import React, {useEffect, useState } from \"react\";\nimport Grid from '@material-ui/core/Grid';\nimport {useStyles} from './styles.js';\n\nfunction Counter() {\n\n    const classes = useStyles();\n\n    const difference = new Date(`${2021}-01-02`) - new Date();\n\n    const [seconds, setSeconds] = useState(Math.floor((difference / 1000) % 60))\n    const [minutes, setMinutes] = useState(Math.floor((difference / 1000 / 60) % 60))\n    const [hours, setHours] = useState(Math.floor((difference / (1000 * 60 * 60)) % 24))\n    const [days, setDays] = useState(Math.floor(difference / (1000 * 60 * 60 * 24)))\n  \n    function updateTime() {\n      if (hours == 0 && minutes == 0 && seconds == 0) {\n        \n      }\n      else {\n        if (hours == 0 && minutes == 0 && seconds == 0) {\n            setDays(days => days - 1);\n            setHours(23)\n            setMinutes(59);\n            setSeconds(59);\n        } else if (minutes == 0 && seconds == 0) {\n            setHours(hours => hours - 1);\n            setMinutes(59);\n            setSeconds(59);\n        } else if (seconds == 0) {\n            setMinutes(minutes => minutes - 1);\n            setSeconds(59);\n        } else{\n          setSeconds(seconds => seconds - 1);\n        }\n      }\n    }\n\n    useEffect(() => {\n\n      const token = setTimeout(updateTime, 1000)\n  \n      return () => clearTimeout(token);\n      \n    })\n\n    function minTwoDigits(n) {\n        return (n < 10 ? '0' : '') + n;\n    }\n\n    const hoursRounded = minTwoDigits(hours);\n    const minutesRounded = minTwoDigits(minutes);\n    const secondsRounded = minTwoDigits(seconds);\n    const daysRounded = minTwoDigits(days);\n\n\n    return (<div className={classes.root}>\n \n            <Grid className={classes.grid} container spacing={0} justify=\"center\">\n                <Grid item className={classes.timeBox}>\n                    <div className={classes.timeNumber}>\n                    {daysRounded} \n                    </div> \n                    <span className={classes.timeWords}>Days</span> \n                </Grid>\n\n                <Grid item className={classes.timeBox}>\n                    <div className={classes.timeNumber}>\n                    {hoursRounded} \n                    </div> \n                    <span className={classes.timeWords}>Hours</span> \n                </Grid>\n\n                <Grid item className={classes.timeBox}>\n                    <div className={classes.timeNumber}>\n                    {minutesRounded} \n                    </div> \n                    <span className={classes.timeWords}>Min</span> \n                </Grid>\n\n                <Grid item className={classes.timeBox}>\n                    <div className={classes.timeNumber}>\n                    {secondsRounded} \n                    </div> \n                    <span className={classes.timeWords}>Sec</span> \n                </Grid>\n            </Grid>\n        \n    </div>);\n  }\n\n  export default Counter;","/Users/ming/Desktop/countdown_js/src/styles.js",[],{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","severity":1,"message":"40","line":17,"column":17,"nodeType":"41","messageId":"42","endLine":17,"endColumn":19},{"ruleId":"39","severity":1,"message":"40","line":17,"column":33,"nodeType":"41","messageId":"42","endLine":17,"endColumn":35},{"ruleId":"39","severity":1,"message":"40","line":17,"column":49,"nodeType":"41","messageId":"42","endLine":17,"endColumn":51},{"ruleId":"39","severity":1,"message":"40","line":21,"column":19,"nodeType":"41","messageId":"42","endLine":21,"endColumn":21},{"ruleId":"39","severity":1,"message":"40","line":21,"column":35,"nodeType":"41","messageId":"42","endLine":21,"endColumn":37},{"ruleId":"39","severity":1,"message":"40","line":21,"column":51,"nodeType":"41","messageId":"42","endLine":21,"endColumn":53},{"ruleId":"39","severity":1,"message":"40","line":26,"column":28,"nodeType":"41","messageId":"42","endLine":26,"endColumn":30},{"ruleId":"39","severity":1,"message":"40","line":26,"column":44,"nodeType":"41","messageId":"42","endLine":26,"endColumn":46},{"ruleId":"39","severity":1,"message":"40","line":30,"column":28,"nodeType":"41","messageId":"42","endLine":30,"endColumn":30},"no-native-reassign",["43"],"no-negated-in-lhs",["44"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]